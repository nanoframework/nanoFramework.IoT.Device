// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// File Automatically Generated by Bitmap2Font

using System;

namespace Iot.Device.Ssd13xx
{
    /// <summary>
    /// Thick8x8 font.
    /// </summary>
    public class Thick8x8 : IFont
    {
        private static readonly byte[][] _fontTable =
        {
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00 },
            new byte[] { 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x36, 0x7F, 0x63, 0x22, 0x63, 0x7F, 0x36, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x0B, 0x3E, 0x68, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x63, 0x73, 0x38, 0x1C, 0x0E, 0x67, 0x63, 0x00 },
            new byte[] { 0x3E, 0x3F, 0x03, 0x6F, 0x63, 0x7F, 0x7E, 0x00 },
            new byte[] { 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x38, 0x3C, 0x0C, 0x0C, 0x0C, 0x3C, 0x38, 0x00 },
            new byte[] { 0x1C, 0x3C, 0x30, 0x30, 0x30, 0x1C, 0x1C, 0x00 },
            new byte[] { 0x18, 0x5B, 0x5B, 0x00, 0x6D, 0x6D, 0x0C, 0x00 },
            new byte[] { 0x00, 0x18, 0x18, 0x7E, 0x7E, 0x18, 0x18, 0x00 },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0E, 0x0E, 0x00 },
            new byte[] { 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00 },
            new byte[] { 0x60, 0x70, 0x38, 0x1C, 0x0E, 0x07, 0x03, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x63, 0x6B, 0x63, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x18, 0x1E, 0x1E, 0x18, 0x18, 0x7E, 0x7E, 0x00 },
            new byte[] { 0x3F, 0x7F, 0x60, 0x7F, 0x03, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x3F, 0x7F, 0x60, 0x7E, 0x60, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x63, 0x7F, 0x7F, 0x60, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x03, 0x7F, 0x60, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x03, 0x7F, 0x63, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x63, 0x3E, 0x63, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x63, 0x7F, 0x60, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00 },
            new byte[] { 0x00, 0x18, 0x18, 0x00, 0x18, 0x1C, 0x1C, 0x00 },
            new byte[] { 0x60, 0x70, 0x38, 0x1C, 0x0E, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x00, 0x7E, 0x7E, 0x00, 0x00, 0x7E, 0x7E, 0x00 },
            new byte[] { 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x3F, 0x7F, 0x60, 0x7C, 0x00, 0x1C, 0x1C, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x63, 0x7B, 0x03, 0x3F, 0x3F, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x00 },
            new byte[] { 0x3F, 0x7F, 0x63, 0x7F, 0x63, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x03, 0x03, 0x03, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x63, 0x63, 0x63, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x03, 0x3F, 0x03, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x03, 0x03, 0x3F, 0x3F, 0x03, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x03, 0x7B, 0x63, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x63, 0x7F, 0x7F, 0x63, 0x00 },
            new byte[] { 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x7E, 0x00 },
            new byte[] { 0x60, 0x60, 0x60, 0x60, 0x63, 0x7F, 0x7E, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x63, 0x3F, 0x7F, 0x63, 0x00 },
            new byte[] { 0x03, 0x03, 0x03, 0x03, 0x03, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x77, 0x7F, 0x6B, 0x6B, 0x6B, 0x63, 0x63, 0x00 },
            new byte[] { 0x6F, 0x6F, 0x6B, 0x6B, 0x6B, 0x7B, 0x7B, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x63, 0x63, 0x63, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x63, 0x63, 0x7F, 0x3F, 0x03, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x63, 0x63, 0x33, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x63, 0x63, 0x3F, 0x7F, 0x63, 0x00 },
            new byte[] { 0x7E, 0x7F, 0x03, 0x7F, 0x60, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x63, 0x63, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x73, 0x3B, 0x1F, 0x0F, 0x00 },
            new byte[] { 0x63, 0x6B, 0x6B, 0x6B, 0x6B, 0x7F, 0x77, 0x00 },
            new byte[] { 0x63, 0x63, 0x63, 0x63, 0x7E, 0x3F, 0x63, 0x00 },
            new byte[] { 0x63, 0x63, 0x7F, 0x7E, 0x60, 0x7F, 0x3F, 0x00 },
            new byte[] { 0x7F, 0x7F, 0x60, 0x3E, 0x03, 0x7F, 0x7F, 0x00 },
            new byte[] { 0x3C, 0x3C, 0x0C, 0x0C, 0x0C, 0x3C, 0x3C, 0x00 },
            new byte[] { 0x03, 0x07, 0x0E, 0x1C, 0x38, 0x70, 0x60, 0x00 },
            new byte[] { 0x3C, 0x3C, 0x30, 0x30, 0x30, 0x3C, 0x3C, 0x00 },
            new byte[] { 0x08, 0x1C, 0x3E, 0x77, 0x63, 0x41, 0x00, 0x00 },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00 },
            new byte[] { 0x0C, 0x1C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x63, 0x7F, 0x63, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x3F, 0x63, 0x7F, 0x63, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x03, 0x03, 0x03, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x63, 0x63, 0x63, 0x3F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x03, 0x3F, 0x03, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x03, 0x03, 0x1F, 0x03, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x03, 0x7B, 0x63, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x63, 0x7F, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x7E, 0x00 },
            new byte[] { 0x00, 0x00, 0x60, 0x60, 0x60, 0x63, 0x7E, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x63, 0x3F, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x77, 0x7F, 0x6B, 0x6B, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x6F, 0x6B, 0x6B, 0x6B, 0x7B, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x63, 0x63, 0x63, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x63, 0x63, 0x7F, 0x03, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x63, 0x63, 0x33, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x63, 0x63, 0x3F, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x03, 0x7F, 0x60, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x63, 0x63, 0x7F, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x33, 0x1B, 0x0F, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x6B, 0x6B, 0x7F, 0x67, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x63, 0x3E, 0x63, 0x00 },
            new byte[] { 0x00, 0x00, 0x63, 0x63, 0x7E, 0x60, 0x3F, 0x00 },
            new byte[] { 0x00, 0x00, 0x7F, 0x60, 0x3E, 0x03, 0x7F, 0x00 },
            new byte[] { 0x3C, 0x3C, 0x0C, 0x06, 0x0C, 0x3C, 0x3C, 0x00 },
            new byte[] { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 },
            new byte[] { 0x3C, 0x3C, 0x30, 0x60, 0x30, 0x3C, 0x3C, 0x00 },
            new byte[] { 0x00, 0x00, 0x06, 0x4F, 0x79, 0x30, 0x00, 0x00 },
            new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
        };

        /// <inheritdoc/>
        public override byte Width { get => 8; }

        /// <inheritdoc/>
        public override byte Height { get => 8; }

        /// <inheritdoc/>
        public override byte[] this[char character]
        {
            get
            {
                var index = (byte)character;
                if ((index < 32) || (index > 127))
                {
                    return _fontTable[32];
                }
                else
                {
                    return _fontTable[index - 32];
                }
            }
        }
    }
}
