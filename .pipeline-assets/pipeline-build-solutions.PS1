# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

# This PS checks what binding need to be build in a PR or regular commit and takes care of performing the various checks and build the solution

# setup msbuild
$vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
$msbuild = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
if ($msbuild)
{
    $msbuild = join-path $msbuild 'MSBuild\Current\Bin\MSBuild.exe'
}

$auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:${env:MY_GITHUBTOKEN}"))))"

if($env:DEVICE_TO_BUILD -eq "")
{
    if($null -ne $env:System_PullRequest_PullRequestId)
    {
        "" | Write-Host -ForegroundColor Yellow
        "**********************" | Write-Host -ForegroundColor Yellow
        "* Building from a PR *" | Write-host -ForegroundColor Yellow
        "**********************" | Write-Host -ForegroundColor Yellow
        "" | Write-Host -ForegroundColor Yellow

        # get files changed in PR, if this is a PR
        $pageCounter = 1

        do
        {
            $batch = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nanoFramework.IoT.Device/pulls/$env:System_PullRequest_PullRequestNumber/files?per_page=100&page=$pageCounter" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

            if($null -eq $commit)
            {
                $commit = $batch
            }
            else
            {
                $commit += $batch
            }
            
            $pageCounter++

        } until ($batch.Count -eq 0)

        # filter removed files              
        $files = $commit.where{$_.status -ne 'removed'}
    }
    else
    {
        "" | Write-Host -ForegroundColor Yellow
        "**************************" | Write-Host -ForegroundColor Yellow
        "* Building from a commit *" | Write-host -ForegroundColor Yellow
        "**************************" | Write-Host -ForegroundColor Yellow
        "" | Write-Host -ForegroundColor Yellow

        # get files changed in the commit, if this is NOT a PR
        $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nanoFramework.IoT.Device/commits/$env:Build_SourceVersion" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

        # filter removed files              
        $files = $commit.files.where{$_.status -ne 'removed'}
    }

    # get file names only
    $files1 = $files | ForEach-Object {$_.filename} | Where-Object {$_ -match 'devices/*'} 

    if($null -eq $files1)
    {
        Write-host "No 'bindings' to build"
        exit
    }

    Write-host "Files changed:"
    $files1 | ForEach-Object { Write-host $_ }
    Write-host ""

    # pattern to select device folder name
    $pattern = '(devices\/)(?<folder>[a-zA-Z0-9._]+)(?>\/)'

    # filter out the collection
    $results = [Regex]::Matches($files1, $pattern)

    # get unique folder names
    $deviceFolders = $results | Sort-Object | Select-Object | Foreach-Object {$_.Groups["folder"].Value} | Get-Unique 

    Write-Host "Found $($deviceFolders.count) package(s) to build"
}
elseif($env:DEVICE_TO_BUILD -eq "ALL")
{
    # pattern to select device folder name
    $files | ForEach-Object {$_.filename} | Where-Object {$_ -match 'devices/*'} 
    $pattern = '(devices\/)(?<folder>[a-zA-Z0-9._]+)(?>\/)'

    # filter out the collection
    $results = [Regex]::Matches($files, $pattern)

    $deviceFolders = $results | Sort-Object | Select-Object | Foreach-Object {$_.Groups["folder"].Value} | Get-Unique
}
else
{
    # build for a specific device

    $deviceFolders = New-Object System.Collections.ArrayList
    $deviceFolders.Add("$env:DEVICE_TO_BUILD")
}

# flag for any build 'failure'
$buildFailed = $false

foreach ($folder in $deviceFolders)
{
    "" | Write-Host -ForegroundColor Yellow
    "***********************" | Write-Host -ForegroundColor Yellow
    "Processing binding '$folder'..." | Write-Host -ForegroundColor Yellow
    "***********************" | Write-Host -ForegroundColor Yellow
    "" | Write-Host -ForegroundColor Yellow
    
    # try to find the solution
    $solutionFile = Get-ChildItem -Path "$env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\$folder\" -Include "$folder.sln" -Recurse

    if($null -eq $solutionFile)
    {
        "Couldn't find any solution file!"  | Write-Host -ForegroundColor Red
        throw "Couldn't find the solution for '$folder'..."
    }
    else
    {
        "" | Write-Host -ForegroundColor Yellow
        "INFO: Processing '$solutionFile'" | Write-Host -ForegroundColor Yellow
        "" | Write-Host -ForegroundColor Yellow
    }

    # try to find the nuspec
    $nuspecFile = Get-ChildItem -Path "$env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\$folder\" -Include "$folder.nuspec" -Recurse

    if($null -eq $nuspecFile)
    {
        "ERROR: Couldn't find the nuspec file!"  | Write-Host -ForegroundColor Red
        throw "Couldn't find the nuspec for '$folder'..."
    }
    else
    {
        "INFO: nuspec file is: '$nuspecFile'" | Write-Host -ForegroundColor Yellow
    }

    # need to restore NuGets first
    nuget restore $solutionFile
    if (-not $?)
    { 
        "ERROR: Couldn't restore solution '$solutionFile'!"  | Write-Host -ForegroundColor Red
        throw "Error restoring '$solutionFile'"
    }

    # for NFC solutions the projects on Card solution needs to be restored too
    if ($solutionFile.Name -eq "Mfrc522.sln" -or
        $solutionFile.Name -eq "Pn5180.sln" -or 
        $solutionFile.Name -eq "Pn532.sln")
    {
        nuget restore $env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\Card\Card.sln
    }

    # Mpu9250 solutions requires Ak8963 to be restored too
    if ($solutionFile.Name -eq "Mpu9250.sln")
    {
        nuget restore $env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\Ak8963\Ak8963.sln
    }

    try
    {
        Clear-Variable LastExitCode

        "INFO: Performing versions check..." | Write-Host 

        ########################
        # perform versions check
        Invoke-Expression "$env:Build_Repository_LocalPath\nf-tools\azure-pipelines-scripts\versions-check.ps1 -SolutionToCheck $solutionFile -WorkingDirectory $env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\$folder\ -NuspecFile $nuspecFile"
        
        if($LASTEXITCODE -eq 0)
        {
            "" | Write-Host -ForegroundColor Yellow
            "INFO: Building '$solutionFile'" | Write-Host -ForegroundColor Yellow
            "" | Write-Host -ForegroundColor Yellow

            #############
            # get version
            $nbgvArgs = @('get-version', '-p', "$env:BUILD_SOURCESDIRECTORY\nanoFramework.IoT.Device\devices\$folder", '-f', 'json')
            $versionData = & 'nbgv' $nbgvArgs | ConvertFrom-Json

            $versionReplacement = "-g"+$versionData.GitCommitIdShort
            $MyNuGetVersion = $versionData.NuGetPackageVersion -replace $versionReplacement, ""

            # replace preview with alpha if this is a PR build
            if($null -ne $env:System_PullRequest_PullRequestId)
            {
                # mix PR and VersionHeight
                $alphaNumber = [int]$env:System_PullRequest_PullRequestNumber + $versionData.VersionHeight;
        
                $alphaPrString = "-alpha." + $alphaNumber.ToString()
                $MyNuGetVersion = $MyNuGetVersion+$alphaPrString
            }
            if ($env:System_PullRequest_SourceBranch -like 'release*')
            {
                $MyNuGetVersion = $MyNuGetVersion + "-rc." + $versionData.VersionHeight
            }
        
            Write-Host "NuGet build is: $MyNuGetVersion"
            Write-Host "Assembly version is: "+$versionData.AssemblyVersion

            ################
            # build solution
            & "$msbuild" "$solutionFile" /verbosity:normal /p:Configuration=Release
            if (-not $?) { throw "Error building '$solutionFile'" }

            ###############
            # package NuGet
            nuget pack $nuspecFile -Version $MyNuGetVersion -Symbols -SymbolPackageFormat snupkg -properties commit="$env:Build_SourceVersion" -OutputDirectory $env:Agent_TempDirectory
            if (-not $?) { throw "Error packaging '$nuspecFile'" }
        }
        else
        {
            "" | Write-Host -ForegroundColor Red
            "*************************************" | Write-Host -ForegroundColor Red
            ">>> Errors occurred, check output <<<" | Write-Host -ForegroundColor Red
            "*************************************" | Write-Host -ForegroundColor Red
            "" | Write-Host -ForegroundColor Red

            # set flag
            $buildFailed = $true                  
        }
    }
    catch
    {
        "" | Write-Host -ForegroundColor Red
        "*************************************" | Write-Host -ForegroundColor Red
        ">>> Errors occurred, check output <<<" | Write-Host -ForegroundColor Red
        "*************************************" | Write-Host -ForegroundColor Red
        "" | Write-Host -ForegroundColor Red

        "" | Write-Host -ForegroundColor Red
        "ERROR: $_" | Write-Host -ForegroundColor Red
        "" | Write-Host -ForegroundColor Red

        # set flag
        $buildFailed = $true
    }
}

if($buildFailed)
{      
    exit 1
}
