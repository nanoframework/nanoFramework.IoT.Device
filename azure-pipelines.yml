# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

trigger:
  branches:
    include:
      - main
      - develop
      - release-*
      - refs/tags/*
  paths:
    exclude:
      - src/*
      - tests/*
      - devices/README.md
      - devices/key.snk
      - .gitignore
      - LICENSE.md
      - README.md
      - tips-trick.md
      - assets/*
      - config/*
      - .github/*
      - StyleCop/*

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-latest'

variables:
  - group: sign-client-credentials
  - name: DOTNET_NOLOGO
    value: true  
  - name: buildPlatform
    value: 'Any CPU'  
  - name: buildConfiguration
    value: 'Release'

steps:

# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true
- checkout: templates
  fetchDepth: 1

- script: |
    git config --global user.email "nanoframework@outlook.com"
    git config --global user.name "nfbot"
    git config --global core.autocrlf true
  displayName: Setup git identity

- template: azure-pipelines-templates/install-nuget.yml@templates
- task: Cache@2
  displayName: Cache NuGet packages
  condition: succeeded()
  continueOnError: true
  inputs:
    key: 'nuget | **/packages.lock.json'
    path: $(UserProfile)/.nuget/packages

- task: DotNetCoreCLI@2  
  displayName: Install nanovc tool
  condition: succeeded()
  inputs:
    command: custom
    custom: tool
    arguments: install -g nanovc --add-source https://pkgs.dev.azure.com/nanoframework/feed/_packaging/sandbox/nuget/v3/index.json

- task: InstallNanoMSBuildComponents@1
  condition: succeeded()
  displayName: Install nanoFramework MSBuild components
  env:
    GITHUB_TOKEN: $(GitHubToken)

# build solutions that need to be build
- task: PowerShell@2
  displayName: Build and pack solutions
  inputs:
    workingDirectory: 'nanoFramework.IoT.Device\devices'
    targetType: 'filePath'
    filePath: '$(Build.Repository.LocalPath)\nanoFramework.IoT.Device\.pipeline-assets\pipeline-build-solutions.PS1'
  env:
    MY_GITHUBTOKEN: $(GitHubToken)

- task: CopyFiles@1
  condition: succeeded()
  displayName: Collecting deployable artifacts
  inputs:
    sourceFolder: $(Agent.TempDirectory)
    Contents: |
      *.nupkg
      *.snupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

# find if there are NuGet artifacts
- task: PowerShell@2
  displayName: Count artifacts
  name: Count_Artifacts
  inputs:
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    targetType: inline
    script: |
      $count = (Get-ChildItem -Path '.' -Filter '*.nupkg' -Recurse).Count
      Write-Host $count ' NuGet packages found'

      # set variable to forward 
      echo "##vso[task.setvariable variable=NUGET_COUNT;isOutput=true]$count"

- task: DotNetCoreCLI@2
  displayName: Install Sign Client CLI
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . sign --version 0.9.1-beta.23530.1

- pwsh: |
    .\sign code azure-key-vault `
    "**/*.nupkg" `
    --base-directory "$(Build.ArtifactStagingDirectory)" `
    --file-list "$(Build.Repository.LocalPath)\nanoFramework.IoT.Device\config\filelist.txt" `
    --publisher-name ".NET nanoFramework" `
    --description "IoT.Device" `
    --description-url "https://github.com/$env:Build_Repository_Name" `
    --azure-key-vault-tenant-id "$(SignTenantId)" `
    --azure-key-vault-client-id "$(SignClientId)" `
    --azure-key-vault-client-secret "$(SignClientSecret)" `
    --azure-key-vault-certificate "$(SignKeyVaultCertificate)" `
    --azure-key-vault-url "$(SignKeyVaultUrl)" `
    --timestamp-url http://timestamp.digicert.com
  displayName: Sign packages
  continueOnError: true
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  
# publish artifacts
- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: Publish deployables artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container

# push NuGet class lib package to Azure Artifacts (always happens except on PR builds)
- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: 'AzureArtifacts-$(System.TeamProject)'

- script: nuget push -ApiKey AzureArtifacts -Source https://pkgs.dev.azure.com/nanoframework/feed/_packaging/sandbox/nuget/v3/index.json *.nupkg -NonInteractive -SkipDuplicate
  workingDirectory: '$(Build.ArtifactStagingDirectory)'
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  continueOnError: false
  displayName: Push NuGet packages to NuGet

# push NuGet class lib package to NuGet (always happens except on PR builds)
- task: NuGetCommand@2
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  continueOnError: true
  displayName: Push NuGet packages to NuGet
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet-$(System.TeamProject)'

- task: DotNetCoreCLI@2
  displayName: Adjust READMEs
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  inputs:
    command: custom
    custom: run
    projects: '**/device-listing.csproj'
    workingDirectory: 'nanoFramework.IoT.Device'

- task: PowerShell@2
  displayName: Push READMEs to GitHub
  condition: >-
    and(
      succeeded(),
      gt(variables['Count_Artifacts.NUGET_COUNT'], 0),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  continueOnError: true
  inputs:
    workingDirectory: 'nanoFramework.IoT.Device'
    targetType: 'inline'
    script: |
      git config user.email 'nanoframework@outlook.com'
      git config user.name 'nfbot'

      # check if anything was changed
      $repoStatus = "$(git status --short --porcelain)"

      if ($repoStatus -ne "")
      {
          Write-Host "There are changes in README files, changes will be pushed to GitHub"
      }
      else
      {
          Write-Host "Repository is clean, no changes to push to GitHub"
          exit 0
      }

      git add README.md
      git add devices/README.md
      git commit -m "Update device lists" -m"***NO_CI***"

      git rebase origin/develop

      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)")))"
      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    workingDirectory: 'nanoFramework.IoT.Device'
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
