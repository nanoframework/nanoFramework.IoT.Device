# Copyright (c) .NET Foundation and Contributors
# See LICENSE file in the project root for full license information.

trigger:
  branches:
    include:
      - main
      - develop
      - release-*
      - refs/tags/*
  paths:
    exclude:
      - src/*
      - tests/*
      - devices/README.md
      - devices/key.snk
      - .gitignore
      - LICENSE.md
      - README.md
      - tips-trick.md

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-latest'

variables:
  DOTNET_NOLOGO: true
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true
- checkout: templates
  fetchDepth: 1

- script: |
    git config --global user.email "nanoframework@outlook.com"
    git config --global user.name "nfbot"
    git config --global core.autocrlf true
  displayName: Setup git identity

- template: azure-pipelines-templates/install-nuget.yml@templates

- task: DotNetCoreCLI@2  
  displayName: Install nanovc tool
  condition: succeeded()
  inputs:
    command: custom
    custom: tool
    arguments: install -g nanovc --add-source https://pkgs.dev.azure.com/nanoframework/feed/_packaging/sandbox/nuget/v3/index.json

- task: InstallnFBuildComponents@1
  condition: succeeded()
  displayName: Install nanoFramework MSBuild components
  env:
    GITHUB_TOKEN: $(GitHubToken)

# build solutions that need to be build
- task: PowerShell@2
  displayName: Build and pack solutions
  inputs:
    workingDirectory: 'nanoFramework.IoT.Device\devices'
    targetType: 'filePath'
    filePath: '$(Build.Repository.LocalPath)\nanoFramework.IoT.Device\.pipeline-assets\pipeline-build-solutions.PS1'
  env:
    MY_GITHUBTOKEN: $(GitHubToken)

- task: CopyFiles@1
  condition: succeeded()
  displayName: Collecting deployable artifacts
  inputs:
    sourceFolder: $(Agent.TempDirectory)
    Contents: |
      *.nupkg
      *.snupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\nanoFramework.IoT.Device\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\nanoFramework.IoT.Device\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "IoT.Device" `
    --description "IoT.Device" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages
  continueOnError: true
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
  
# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: Publish deployables artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container

# push NuGet class lib package to Azure Artifacts (always happens except on PR builds)
- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: 'AzureArtifacts-$(System.TeamProject)'

- script: nuget push -ApiKey AzureArtifacts -Source https://pkgs.dev.azure.com/nanoframework/feed/_packaging/sandbox/nuget/v3/index.json *.nupkg -NonInteractive -SkipDuplicate
  workingDirectory: '$(Build.ArtifactStagingDirectory)'
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  continueOnError: false
  displayName: Push NuGet packages to NuGet

# push NuGet class lib package to NuGet (always happens except on PR builds)
- script: nuget push -ApiKey $(NUGETAPIKEY) -Source https://api.nuget.org/v3/index.json *.nupkg -NonInteractive -SkipDuplicate -NoSymbols
  workingDirectory: '$(Build.ArtifactStagingDirectory)'
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  continueOnError: false
  displayName: Push NuGet packages to NuGet

- task: DotNetCoreCLI@2
  displayName: Adjust READMEs
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  inputs:
    command: custom
    custom: run
    projects: '**/device-listing.csproj'
    workingDirectory: 'nanoFramework.IoT.Device'

- task: PowerShell@2
  condition: >-
    and(
      succeeded(),
      eq(variables['System.PullRequest.PullRequestId'], '')
    )
  displayName: Push READMEs to GitHub
  continueOnError: true
  inputs:
    workingDirectory: 'nanoFramework.IoT.Device'
    targetType: 'inline'
    script: |
      git config user.email 'nanoframework@outlook.com'
      git config user.name 'nfbot'

      git add README.md
      git add devices/README.md
      git commit -m "Update device lists" -m"***NO_CI***"

      git rebase origin/develop

      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"
      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    workingDirectory: 'nanoFramework.IoT.Device'
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
