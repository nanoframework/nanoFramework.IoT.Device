trigger:
  branches:
    include: ["main", "develop*", "release-*", "refs/tags/*" ]
  paths:
    exclude: [ "doc", "*.md", ".gitignore", "README.md", "devices/README.md", "tips-trick.md", "src/devices_generated_status.md", "LICENSE.md" ]

# PR always trigger build
pr:
  autoCancel: true

# add nf-tools repo to resources (for Azure Pipelines templates)
resources:
  repositories:
    - repository: templates
      type: github
      name: nanoframework/nf-tools
      endpoint: nanoframework

pool:
  vmImage: 'windows-2019'

variables:
  DOTNET_NOLOGO: true
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:

# need this here in order to persist GitHub credentials 
- checkout: self
  submodules: true

- script: |
    git config --global user.email "nanoframework@outlook.com"
    git config --global user.name "nfbot"
    git config --global core.autocrlf true
  displayName: Setup git identity

- template: azure-pipelines-templates/install-nuget.yml@templates

- task: DotNetCoreCLI@2  
  displayName: Install NBGV tool
  condition: succeeded()
  inputs:
    command: custom
    custom: tool
    arguments: install -g nbgv

- script: nbgv cloud -a -c
  condition: succeeded()
  displayName: Set build number

- task: PowerShell@2
  condition: succeeded()
  displayName: Get NuGet build number
  inputs:
    targetType: 'inline'
    script: |
      $MyNuGetVersion = $env:NBGV_NuGetPackageVersion -replace ".g$env:NBGV_GitCommitIdShort", ""

      # replace preview with alpha if this is a PR build
      if($env:System_PullRequest_PullRequestId -ne $null)
      {
          # mix PR and VersionHeight
          $alphaNumber = [int]$env:System_PullRequest_PullRequestNumber + $env:NBGV_VersionHeight;

          $alphaPrString = "alpha." + $alphaNumber.ToString()
          $MyNuGetVersion = $MyNuGetVersion -replace "preview", $alphaPrString
      }
      if ($env:System_PullRequest_SourceBranch -like 'release*')
      {
          $MyNuGetVersion = $MyNuGetVersion + "-rc." + $env:NBGV_VersionHeight
      }

      Write-Host "NuGet build is: $MyNuGetVersion"
      Write-Host "Assembly version is: $env:NBGV_AssemblyVersion"

      Write-Host "$("##vso[task.setvariable variable=MY_NUGET_VERSION]")$MyNuGetVersion"

- task: InstallnFBuildComponents@1
  condition: succeeded()
  displayName: Install nanoFramework MSBuild components

# build solutions that need to be build
- powershell: |
    # setup msbuild
    $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
    $msbuild = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -property installationPath
    if ($msbuild) {
        $msbuild = join-path $msbuild 'MSBuild\Current\Bin\MSBuild.exe'
    }

    $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:${env:MY_GITHUBTOKEN}"))))"
  
    if($env:DEVICE_TO_BUILD -eq "")
    {
        if($env:System_PullRequest_PullRequestId -ne $null)
        {
            "" | Write-Host -ForegroundColor Yellow
            "**********************" | Write-Host -ForegroundColor Yellow
            "* Building from a PR *" | Write-host -ForegroundColor Yellow
            "**********************" | Write-Host -ForegroundColor Yellow
            "" | Write-Host -ForegroundColor Yellow

            # get files changed in PR, if this is a PR
            # can get max of 100 files using this method (for more requires paging)
            $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nanoFramework.IoT.Device/pulls/$env:System_PullRequest_PullRequestNumber/files?per_page=100" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

            # filter removed files              
            $files = $commit.where{$_.status -ne 'removed'}
        }
        else
        {
            "" | Write-Host -ForegroundColor Yellow
            "**************************" | Write-Host -ForegroundColor Yellow
            "* Building from a commit *" | Write-host -ForegroundColor Yellow
            "**************************" | Write-Host -ForegroundColor Yellow
            "" | Write-Host -ForegroundColor Yellow

            # get files changed in the commit, if this is NOT a PR
            $commit = Invoke-RestMethod -Uri "https://api.github.com/repos/nanoframework/nanoFramework.IoT.Device/commits/$(Build.SourceVersion)" -Header @{"Authorization"="$auth"} -ContentType "application/json" -Method GET

            # filter removed files              
            $files = $commit.files.where{$_.status -ne 'removed'}
        }

        # get file names only
        $files1 = $files | % {$_.filename} | Where-Object {$_ -match 'devices/*'} 

        if($null -eq $files1)
        {
            Write-host "No 'bindings' to build"
            exit
        }

        Write-host "Files changed:"
        $files1 | % { Write-host $_ }
        Write-host ""

        # pattern to select device folder name
        $pattern = '(devices\/)(?<folder>[a-zA-Z0-9._]+)(?>\/)'

        # filter out the collection
        $results = [Regex]::Matches($files1, $pattern)

        # get unique folder names
        $deviceFolders = $results | Sort-Object | Select-Object | Foreach-Object {$_.Groups["folder"].Value} | Get-Unique 

        Write-host "Found $($deviceFolders.count) package(s) to build"
    }
    else
    {
        # build for a specific device

        $deviceFolders = New-Object System.Collections.ArrayList
        $deviceFolders.Add("$env:DEVICE_TO_BUILD")
    }

    foreach ($folder in $deviceFolders)
    {
        "" | Write-Host -ForegroundColor Yellow
        "***********************" | Write-Host -ForegroundColor Yellow
        "Processing binding '$folder'..." | Write-Host -ForegroundColor Yellow
        "***********************" | Write-Host -ForegroundColor Yellow
        "" | Write-Host -ForegroundColor Yellow
        
        # try to find the solution
        $solutionFile = Get-ChildItem -Path "devices\$folder\" -Include "$folder.sln" -Recurse

        if($null -eq $solutionFile)
        {
            "Couldn't find any solution file!"  | Write-Host -ForegroundColor Red
            throw "Couldn't the solution for '$folder'..."
        }
        else
        {
            "" | Write-Host -ForegroundColor Yellow
            "***********************" | Write-Host -ForegroundColor Yellow
            "Building '$solutionFile'" | Write-Host -ForegroundColor Yellow
            "***********************" | Write-Host -ForegroundColor Yellow
            "" | Write-Host -ForegroundColor Yellow
        }

        # try to find the nuspec
        $nuspecFile = Get-ChildItem -Path "devices\$folder\" -Include "$folder.nuspec" -Recurse
  
        if($null -eq $nuspecFile)
        {
            "Couldn't find the nuspec file!"  | Write-Host -ForegroundColor Red
            throw "Couldn't the nuspec for '$folder'..."
        }
        else
        {
            "nuspec file is: '$nuspecFile'" | Write-Host -ForegroundColor Yellow
        }

        # need to restore NuGets first
        nuget restore $solutionFile
        if (-not $?) { throw "Error restoring '$solutionFile'" }

        # for NFC solutions the projects on Card solution needs to be restored too
        if ($solutionFile.Name -eq "Mfrc522.sln" -or
            $solutionFile.Name -eq "Pn5180.sln" -or 
            $solutionFile.Name -eq "Pn532.sln")
        {
            nuget restore devices\Card\Card.sln
        }

        # build solution
        & "$msbuild" "$solutionFile" /verbosity:normal /p:Configuration=Release
        if (-not $?) { throw "Error building '$solutionFile'" }

        # package NuGet
        nuget pack $nuspecFile -Version $(MY_NUGET_VERSION) -Symbols -SymbolPackageFormat snupkg -properties commit="$(Build.SourceVersion)" -OutputDirectory $env:Agent_TempDirectory
        if (-not $?) { throw "Error packaging '$nuspecFile'" }
    }
  displayName: Build and pack solutions
  env:
    MY_GITHUBTOKEN: $(GitHubToken)

- task: CopyFiles@1
  condition: succeeded()
  displayName: Collecting deployable artifacts
  inputs:
    sourceFolder: $(Agent.TempDirectory)
    Contents: |
      *.nupkg
      *.snupkg
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: DotNetCoreCLI@2
  displayName: Install SignTool tool
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . SignClient

- pwsh: |
    .\SignClient "Sign" `
    --baseDirectory "$(Build.ArtifactStagingDirectory)" `
    --input "**/*.nupkg" `
    --config "$(Build.Repository.LocalPath)\config\SignClient.json" `
    --filelist "$(Build.Repository.LocalPath)\config\filelist.txt" `
    --user "$(SignClientUser)" `
    --secret '$(SignClientSecret)' `
    --name "IoT.Device" `
    --description "IoT.Device" `
    --descriptionUrl "https://github.com/$env:Build_Repository_Name"
  displayName: Sign packages
  continueOnError: true
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], '') )
  
# publish artifacts (only possible if this is not a PR originated on a fork)
- task: PublishBuildArtifacts@1
  condition: succeeded()
  displayName: Publish deployables artifacts
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: deployables
    ArtifactType: Container

# push NuGet class lib package to NuGet (always happens except on PR builds)
- task: NuGetCommand@2
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''))
  continueOnError: true
  displayName: Push NuGet packages to NuGet
  inputs:
    command: push
    nuGetFeedType: external
    allowPackageConflicts: true
    packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
    publishFeedCredentials: 'NuGet-$(System.TeamProject)'

- task: DotNetCoreCLI@2
  displayName: Adjust READMEs
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''))
  inputs:
    command: custom
    custom: run
    projects: '**/device-listing.csproj'

- task: PowerShell@2
  condition: and( succeeded(), eq(variables['System.PullRequest.PullRequestId'], ''))
  displayName: Push READMEs to GitHub
  continueOnError: true
  inputs:
    targetType: 'inline'
    script: |
      git config user.email 'nanoframework@outlook.com'
      git config user.name 'nfbot'

      git add README.md
      git add devices/README.md
      git commit -m "Update device lists" -m"***NO_CI***"

      git rebase origin/develop

      # compute authorization header in format "AUTHORIZATION: basic 'encoded token'"
      # 'encoded token' is the Base64 of the string "nfbot:personal-token"
      $auth = "basic $([System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("nfbot:$(GitHubToken)"))))"
      git -c http.extraheader="AUTHORIZATION: $auth" push origin "HEAD:$(Build.SourceBranchName)"

# step from template @ nf-tools repo
# report error
- template: azure-pipelines-templates/discord-webhook-task.yml@templates  
  parameters:
    status: 'failure'
    webhookUrl: '$(DiscordWebhook)'
    message: ''
